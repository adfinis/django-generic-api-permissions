[tool.poetry]
name = "django-generic-api-permissions"
version = "0.4.3"
description="Generic API permissions and visibilities for Django"
authors = ["Adfinis <indo@adfinis.com>"]
readme = "README.md"
repository = "https://github.com/adfinis/django-generic-api-permissions"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Environment :: Web Environment",
    "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
    "Operating System :: OS Independent",
    "Framework :: Django",
    "Framework :: Django :: 3.2",
    "Framework :: Django :: 4.2",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
include = ["CHANGELOG.md"]
exclude = [
    "tests",
]
packages = [
    { include = "generic_permissions" }
]

[tool.poetry.dependencies]
python = ">=3.8.1"
django = ">=3.2"
djangorestframework = "^3.14"

[tool.poetry.dev-dependencies]
black = "^23.12.1"
ruff = "^0.2.2"

[tool.poetry.group.djangorestframework-jsonapi]
optional = true

[tool.poetry.group.djangorestframework-jsonapi.dependencies]
djangorestframework-jsonapi= "^6.1"


[tool.ruff.lint]
select = ["E", "W", "F", "B", "I", "C4", "C90"]

ignore = [
    # whitespace before ':'
    "E203",
    # too many leading ### in a block comment
    "E266",
    # line too long (managed by black)
    "E501",
    # do not enforce existence of docstrings
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    # needed because of https://github.com/ambv/black/issues/144
    "D202",
]

unfixable = ["B"]

[tool.pytest.ini_options]
addopts = "--reuse-db --randomly-seed=1521188766 --randomly-dont-reorganize"
DJANGO_SETTINGS_MODULE = "tests.settings"

[tool.semantic_release]
assets = []
commit_message = "chore(release): {version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = true
tag_format = "v{version}"
version_toml = ["pyproject.toml:tool.poetry.version"]
build_command = "poetry build"

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.remote.token]
env = "GH_TOKEN"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true

[tool.isort]
known_first_party="dpv"
multi_line_output=3
include_trailing_comma=true
force_grid_wrap=0
combine_as_imports=true
line_length=88

[tool.coverage.run]
source=["."]

[tool.coverage.report]
fail_under=100
exclude_lines = [
    "pragma: no cover",
    "pragma: todo cover",
    "def __str__",
    "def __unicode__",
    "def __repr__",
]
omit= [
    "*/migrations/*",
    "*/apps.py",
    "manage.py",
    ".tox/*",
]
show_missing = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
